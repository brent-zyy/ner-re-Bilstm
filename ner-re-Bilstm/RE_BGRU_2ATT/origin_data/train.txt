数据项	数据元素	属于	数据项（Data Item）是组成数据元素的、有独立含义的、不可分割的最小单位。
数据结构	数据元素	包含	数据结构（Data Structure）是相互之间存在一种或多种特定关系的数据元素的集合。
逻辑结构	数据	属性	数据的逻辑结构是从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的。
数据结构	四种结构	包含	数据结构通常有四类基本结构：集合结构，线性结构，树结构，图结构
线性结构	数据元素	属性	线性结构：数据元素之间存在一对一的关系。
图、网结构	数据元素	属性	图结构或网状结构：数据元素之间存在多对多的关系。
顺序存储结构	数据元素	属性	顺序存储结构：顺序存储结构是借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系，通常借助 程序设计语言的数组类型来描述。
抽象数据类型	数据对象	包含	抽象数据类型（Abstract Data Type, ADT） 一般指由用户定义的、表示应用问题的数学模型，具体包括三部分：数据对象、数据对象上关系的集合 以及对数据对象的基本操作的集合。
线性表	顺序表	包含	线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素，这种表示 也称作线性表的顺序存储结构或顺序映像。
顺序表	数据元素	拥有	当在顺序表中查找一个数据元素时，其时间主要耗费在数据的比较上，而比较的次数取决于 被查元素在线性表中的位置。
顺序表	时间复杂度	拥有	顺序表按值查找算法的平均时间复杂度为O(n)。
顺序表	数据元素	拥有	当在顺序表中某个位置上删除一个数据元素时，其时间主要耗费在移动元素上，而移动元素 的个数取决于删除元素的位置。
节点	两个域	拥有	节点包括两个域：其中存储数据元素信息的域称为数据域；存储直接后继存储位置的域称 为指针域。
数据元素	单链表	属性	由于最后一个数据元素没有直接后继，则单链表中最后一个结点的指针为空 （NULL）。
链表	指针	拥有	通常将链表画成用箭头相链接的结点的序列，结点之间的箭头表示链域中的指针。
单链表	指针	拥有	单链表是由表头指针唯一确定，因此单链表可以用头指针的名字来命名。
首元节点	链表	属于	首元结点是指链表中存储第一个数据元素的结点。
头指针	链表	属性	头指针是指向链表中第一个错点的指针。若链表设有头结点，则头指针所指结点为线性表的头结点；若链表不设头结点，则头指针所指结点为该线性表的首元结点。
前插法	链表	无	前插法是通过将新结点逐个插入链表的头部(头结点之后)来创建链表，每次申请一个新结 点，读人相应的数据元素值，然后将新结点插入到头结点之后。
循环链表	链式存储结构	属于	循环链表(CircularLinked List)是另一种形式的链式存储结构。其特点是表中最后一个结点 的指针域指向头结点，整个链表形成一个环。
顺序表	链表	无	顺序表的存储空间必须预先分配，元素个数扩充受一定限制，易造成存储空间浪费或空间溢 出现象；而链表不需要为其预先分配空间，只要内存空间允许，链表中的元素个数就没有限制。
存储密度	数据元素	无	存储密度是指数据元素本身 所占用的存储量和整个结点结构所占用的存储量之比
栈	栈顶	包含	对栈来说，表尾端有其 特殊含义，称为栈顶（top）,相应地，表头端称为栈底（bottom）。
栈	后进先出	拥有	栈的修改是按后进先出的原则进行的
队列	队尾	包含	在队列中，允许插入的一端称为队尾（rear）,允许删除的一端则称为队头（front）。
顺序栈	数组空间	无	顺序栈的初始化操作就是为顺序栈动态分配一个预定义大小的数组空间。
出栈	栈顶	无	出栈操作是将栈顶元素删除。
链栈	栈	属于 	链栈是指采用链式存储结构实现的栈。
递归	数据结构	无	所谓递归是指，若在一个函数、过程或者数据结构定义的内部又直接(或间接)岀现定义本身 的应用，则称它们是递归的，或者是递归定义的。
函数	栈	无	函数之间的信息传递和控制转移必须通过“栈”来实现
入队	队尾	无	入队操作是指在队尾插入一个新的元素。
队列	队头	包含	当队列非空时，此操作返回当前队头元素的值，队头指针保持不变。
队头	队尾	反义	一个链队显然需要两个分别指示队头和队尾的指针(分别称为头指针和尾指针)才能唯一确定。
链队	入队	无	链队在入队前不需要判断队是否满，需要为入队元素动态 分配一个结点空间
操作数	运算符	无	任何一个表达式都是由操作数（operand）运算符（operator）和界限符（delimiter）组成的, 统称它们为单词。
运算符	三种	包含	运算符可以分为算术运算符、关系运算符和逻辑运算符3类；
栈	线性表	属于	栈是限定仅在表尾进行插入或删除的线性表，又称为后进先出的线性表。
栈	顺序栈	包含	栈的主要操作是进栈和出栈，对于顺序栈的进栈 和出栈操作要注意判断栈满或栈空。
队列	循环队列	包含	队列的主要操作是进队和出 队，对于顺序的循环队列的进队和出队操作要注意判断队满或队空。
队头	队尾	反义	凡是涉及队头或队尾指针的 修改都要将其对M心CQSIZE求模。
串	字符	拥有	串中字符的数目n称为串的长度。
串	子串	包含	串中任意个连续的字符组成的子序列称为该串的子串。
串	子串	包含	子串在主串中的位置则以子串的第一个字符在主 串中的位置来表示。
头指针	尾指针	反义	为了便于进行串的操作，当以链表存储串值时，除头指针外，还可附设一个尾指针指示链 表中的最后一个结点，并给出当前串的长度。
串	顺序存储	无	串的顺序存储是指用一组地址连续的存储单元存储串值的字符序列。
数组	数据元素	拥有	数组是由类型相同的数据元素构成的有序集合，每个元素称为数组元素
数组	维数	拥有	数组一旦被定义，它的维数和维界就不再改变。
矩阵	特殊矩阵	包含	假若值相同的元素或者零元素在矩阵中的分布有一定规律，则称此类矩阵为特殊矩阵
三角矩阵	上下三角矩阵	包含	以主对角线划分，三角矩阵有上三角矩阵和下三角矩阵两种。
串	线性表	属于	串是内容受限的线性表，它限定了表中的元素为字符。
模式匹配算法	BF、WP	包含	串的常用算法是模式匹配算法，主要有BF算法和WP 算法。
WP	BF	无	WP算法对BF算法 进行改进，消除回溯，提高了效率，时间复杂度为O(m+n)。
n维数组	线性表	包含	一个n维数组实质上是n个线性表的组合，其每一维都 是一个线性表。
树	结点	包含	树（Tree）是个结点的有限集
度	结点的子树	同义	结点的度：结点拥有的子树数称为结点的度。
非终端节点	分支节点	同义	非终端结点：度不为0的结点称为非终端结点或分支结点。
子孙	节点的子树	属于	子孙：以某结点为根的子树中的任一结点都称为该结点的子孙。
有序树	无序树	反义	有序树和无序树：如果将树中结点的各子树看成从左至右是有次序的(即不能互换)， 则称该树为有序树，否则称为无序树。在有序树中最左边的子树的根称为第一个孩子，最右边的 称为最后一■个孩子。
二叉树	节点	包含	二叉树(Binary Tree )是n个结点所构成的集合
二叉树	节点	包含	在二叉树的第i层上至多有2i-1个结点
满二叉树	节点	包含	满二叉树的特点是：每一层上的结点数都是最大结点数
数据元素	二叉树	无	由一个数据元素和分别指向其左、右子树的两个分支构成，则表示二叉树的链表 中的结点至少包含3个域：数据域和左、右指针域
复制二叉树	二叉树	无	复制二叉树就是利用已有的一棵二叉树复制得到另外一棵与其完全相同的二叉树。
线索二叉树	二叉链表	属于	由于线索二叉树构造的实质是将二叉链表中的空指针改为指向前驱或后继的线索，而前驱或 后继的信息只有在遍历时才能得到，因此线索化的过程即为在遍历的过程中修改空指针的过程， 可用递归算法。
遍历	先根	包含	树的遍历：一种是先根(次序)遍历树，即：先访问树 的根结点，然后依次先根遍历根的每棵子树；另一种是后根(次序)遍历，即先依次后根遍历每 棵子树，然后访问根结点。
哈夫曼树	节点	包含	由于哈夫曼树中没有 度为1的结点，则一棵有n个叶子结点的哈夫曼树共有2n-l个结点
哈夫曼编码	哈夫曼树	依赖	哈夫曼编码：对一棵具有n个叶子的哈夫曼树，若对树中的每个左分支赋予0,右分支 赋予1,则从根到每个叶子的路径上，各分支的赋值分别构成一个二进制串，该二进制串就称为 哈夫曼编码。
顺序存储	链式存储	无	二叉树有两种存储表示：顺序存储和链式存储。
链式存储	二叉链表	同义	链式存储又称二叉链表，每个结点 包括两个指针，分别指向其左孩子和右孩子。链式存储是二叉树常用的存储结构。
孩子兄弟	二叉树	依赖	孩子兄弟表示法是常 用的表示法，任意一棵树都能通过孩子兄弟表示法转换为二叉树进行存储。
线索二叉树	二叉链表	无	在线索二叉树中，利用二叉链表中的n+1个空指针域来存放指向某种遍历次序下的前驱 结点和后继结点的指针，这些附加的指针就称为“线索”。
图	数据结构	属于	图是一种比线性表和树更为复杂的数据结构。
无向图	图	属于	若边集E(G)为无向边的集合， 则称该图为无向图。
度	边	依赖	度、入度和出度：顶点v的度是指和v相关联的边的数目，记为TD((v)。
简单路径	简单回路	无	简单路径、简单回路或简单环：序列中顶点不重复出现的路径称为简单路径。除了第一 个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为简单回路或简单环。
邻接矩阵	矩阵	属于	邻接矩阵(Adjacency Matrix)是表示顶点之间相邻关系的矩阵。
表头节点表	表头节点	拥有	表头结点表：由所有表头结点以顺序结构的形式存储，以便可以随机访问任一顶点的边 链表。表头结点包括数据域(data)和链域(firstarc)两部分
邻接多重表	链表	无	在邻接多重表中，所有依附于同一顶点的边串联在同一链表中，由于每条边依附 于两个顶点，则每个边结点同时链接在两个链表中。
遍历图	存储结构	无	遍历图的过程实质上是对每个顶点查找其邻 接点的过程，其耗费的时间则取决于所釆用的存储结构。
邻接表	存储结构	属于	当以邻接表做存储结构时，深度优先搜索 遍历图的时间复杂度为O(n + e)。
最小生成树算法	普利姆克鲁斯卡尔	包含	普里姆(Prim)算法和克鲁斯卡尔(Kruskal)算法是两个利用MST性质构造最小生成树的 算法。
有向图	有向无环图	包含	一个无环的有向图称作有向无环图（Directed AcyclineGraph ）,简称DAG图。
aoe网	有向无环图	属于	AOE-网是一个 带权的有向无环图，其中，顶点表示事件，孤表示活动，权表示活动持续的时间。
图的存储方式	边集合表示法	包含	图的存储方式有两大类：以边集合方式的表示法和以链接方式的表示法。
关键字	数据项	属性	关键字是数据元素（或记录）中某个数据项的值，用它可以标识一个数据元素（或记录）。
关键字	次关键字	包含	反之，称用以识别若干记录的关键字为次关键字。
查找	查找表	依赖	查找是指根据给定的某个值，在查找表中确定一个其关键字等于给定值的记录或数据元素。
关键字	查找	无	若表中不存在关键字等于给定值的记录，则称查找不成功，此时查找的 结果可给出一个“空”记录或“空”指针。
平均查找长度	关键字	无	为确定记录在查找表中的位置，需和给定值进行比较的关键字个数的期望值，称为查找算法在查找成功时的平均查找长度(Average Search Length, ASL)。
逻辑结构 逻辑关系 被依赖 数据的逻辑结构是从逻辑关系上描述数据，它与数据的存储无关，是独立于计算机的
查找操作 元素值 被依赖 查找操作是根据指定的元素值e,查找顺序表中第⑴个与e相等的元素。
指针 链表 被依赖 根据链表结点所含指针个数、指针指向和指针连接方式，可将链表分为单链表、循环链表、 双向链表、二叉链表、十字链表、邻接表、邻接多重表等
位置 方法 被依赖 根据结点插入位置的不同，链表的创建方法可分为前插法和后插法。
入栈操作 元素 被依赖 入栈操作是指在栈顶插入一个新的元素。
值 栈顶指针 被依赖 取栈顶元素:当栈非空时，此操作返回当前栈顶元素的值，栈顶指针保持不变
栈 操作 被依赖 在实际利用栈的问题中，入栈和岀栈操作大都不是单调的，而是交错进行的。
